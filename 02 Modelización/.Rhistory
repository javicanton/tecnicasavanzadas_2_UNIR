plot(tiempo_Singapur, eliminaciones_Singapur,
main = "Eliminaciones de Replicantes Nexus-5 en Singapur",
xlab = "Mes",
ylab = "Número de Eliminaciones",
pch = 16,
col = "darkblue")
# Ajuste del modelo logarítmico
modelo_Singapur <- lm(eliminaciones_Singapur ~ log(tiempo_Singapur))
lines(tiempo_Singapur, predict(modelo_Singapur), col = "red")
# Datos de Moscú (Distribución de potencia)
# La expansión de la red de replicantes sigue una ley de escala
# donde el número de eliminaciones crece según una potencia del tiempo
tiempo_Moscu <- 1:12
eliminaciones_Moscu <- c(20, 57, 104, 160, 224, 294, 370, 452, 539, 631, 728, 830)
# Gráfico de dispersión para Moscú
plot(tiempo_Moscu, eliminaciones_Moscu,
main = "Eliminaciones de Replicantes Nexus-5 en Moscú",
xlab = "Mes",
ylab = "Número de Eliminaciones",
pch = 16,
col = "red")
# Ajuste del modelo de potencia
modelo_Moscu <- lm(log(eliminaciones_Moscu) ~ log(tiempo_Moscu))
lines(tiempo_Moscu, exp(predict(modelo_Moscu)), col = "blue")
# Datos de Dubai (Distribución sigmoidal)
# La implementación gradual de nuevas tecnologías de detección
# ha creado una curva en forma de S característica
tiempo_Dubai <- 1:12
eliminaciones_Dubai <- c(10, 15, 25, 45, 85, 150, 220, 280, 320, 340, 350, 355)
# Gráfico de dispersión para Dubai
plot(tiempo_Dubai, eliminaciones_Dubai,
main = "Eliminaciones de Replicantes Nexus-5 en Dubai",
xlab = "Mes",
ylab = "Número de Eliminaciones",
pch = 16,
col = "gold")
# Ajuste del modelo sigmoidal (usando una función logística)
modelo_Dubai <- nls(eliminaciones_Dubai ~ SSlogis(tiempo_Dubai, Asym, xmid, scal))
lines(tiempo_Dubai, predict(modelo_Dubai), col = "red")
# Datos de Sydney (Distribución sinusoidal)
# Los patrones climáticos y las variaciones estacionales
# han creado un patrón oscilante en las eliminaciones
tiempo_Sydney <- 1:12
eliminaciones_Sydney <- c(50, 65, 45, 70, 40, 75, 35, 80, 30, 85, 25, 90)
# Gráfico de dispersión para Sydney
plot(tiempo_Sydney, eliminaciones_Sydney,
main = "Eliminaciones de Replicantes Nexus-5 en Sydney",
xlab = "Mes",
ylab = "Número de Eliminaciones",
pch = 16,
col = "cyan")
# Ajuste del modelo sinusoidal
modelo_Sydney <- lm(eliminaciones_Sydney ~ sin(2*pi*tiempo_Sydney/12) + cos(2*pi*tiempo_Sydney/12))
lines(tiempo_Sydney, predict(modelo_Sydney), col = "red")
library(tidyverse) # Conjunto de paquetes útiles: dplyr, ggplot2, tidyr...
library(readr) # Para leer archivos CSV
library(skimr) # Para obtener resúmenes estadísticos detallados
library(janitor) # Para limpiar nombres de columnas y detectar errores
library(ggplot2) # Para hacer gráficos
library(ggthemes) # Temas bonitos para gráficos
library(forcats) # Para trabajar con variables categóricas
library(ggeffects) # Para graficar efectos marginales de modelos generalizados
library(nnet) # Para modelos de redes neuronales
library(yardstick) # Para métricas de clasificación
library(pROC) # Para calcular curvas ROC y AUC y evaluar modelos de clasificación
# ========================================
# 2. CARGA DEL DATASET
# ========================================
# Cargamos el dataset directamente desde la misma carpeta
df <- read_csv("Dataset_Spotifal.csv")
# ========================================
# 0. CONFIGURACIÓN DEL ENTORNO
# ========================================
# Instalamos rstudioapi si no está disponible
if (!require("rstudioapi")) install.packages("rstudioapi")
# Establecemos el directorio de trabajo al directorio del script
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
library(tidyverse) # Conjunto de paquetes útiles: dplyr, ggplot2, tidyr...
library(readr) # Para leer archivos CSV
library(skimr) # Para obtener resúmenes estadísticos detallados
library(janitor) # Para limpiar nombres de columnas y detectar errores
library(ggplot2) # Para hacer gráficos
library(ggthemes) # Temas bonitos para gráficos
library(forcats) # Para trabajar con variables categóricas
library(ggeffects) # Para graficar efectos marginales de modelos generalizados
library(nnet) # Para modelos de redes neuronales
library(yardstick) # Para métricas de clasificación
library(pROC) # Para calcular curvas ROC y AUC y evaluar modelos de clasificación
# ========================================
# 2. CARGA DEL DATASET
# ========================================
# Cargamos el dataset directamente desde la misma carpeta
df <- read_csv("Dataset_Spotifal.csv")
# Creamos directorio para imágenes si no existe
if (!dir.exists("img")) {
dir.create("img")
}
# Instalamos corrplot si no está disponible
if (!require("corrplot")) install.packages("corrplot")
library(corrplot)
# Creamos matriz de correlaciones para variables numéricas
variables_numericas <- df %>%
select(dias_ultimo_inicio, canciones_por_semana, listas_creadas, edad, abandona)
matriz_cor <- cor(variables_numericas)
# Visualización de la matriz de correlaciones
png("img/matriz_correlaciones.png", width = 800, height = 800)
corrplot(matriz_cor,
method = "color",
type = "upper",
order = "hclust",
addCoef.col = "black",
tl.col = "black",
tl.srt = 45,
diag = FALSE)
dev.off()
# Gráficos de dispersión para relaciones principales
# 1. Días último inicio vs Abandono
png("img/dias_vs_abandono.png", width = 800, height = 600)
ggplot(df, aes(x = dias_ultimo_inicio, y = abandona)) +
geom_jitter(height = 0.05, alpha = 0.5) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Relación entre días sin actividad y abandono",
x = "Días desde último inicio",
y = "Probabilidad de abandono"
) +
theme_minimal()
dev.off()
ggplot(df, aes(x = dias_ultimo_inicio, y = abandona)) +
geom_jitter(height = 0.05, alpha = 0.5) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Relación entre días sin actividad y abandono",
x = "Días desde último inicio",
y = "Probabilidad de abandono"
) +
theme_minimal()
dev.off()
ggplot(df, aes(x = dias_ultimo_inicio, y = abandona)) +
geom_jitter(height = 0.05, alpha = 0.5) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Relación entre días sin actividad y abandono",
x = "Días desde último inicio",
y = "Probabilidad de abandono"
) +
theme_minimal()
dev.off()
# 2. Canciones por semana vs Abandono
png("img/canciones_vs_abandono.png", width = 800, height = 600)
ggplot(df, aes(x = canciones_por_semana, y = abandona)) +
geom_jitter(height = 0.05, alpha = 0.5) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Relación entre uso semanal y abandono",
x = "Canciones por semana",
y = "Probabilidad de abandono"
) +
theme_minimal()
dev.off()
ggplot(df, aes(x = canciones_por_semana, y = abandona)) +
geom_jitter(height = 0.05, alpha = 0.5) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
labs(
title = "Relación entre uso semanal y abandono",
x = "Canciones por semana",
y = "Probabilidad de abandono"
) +
theme_minimal()
dev.off()
# 3. Edad vs Abandono con línea de corte en 50 años
png("img/edad_vs_abandono.png", width = 800, height = 600)
ggplot(df, aes(x = edad, y = abandona)) +
geom_jitter(height = 0.05, alpha = 0.5) +
geom_smooth(method = "glm", method.args = list(family = "binomial")) +
geom_vline(xintercept = 50, linetype = "dashed", color = "red") +
labs(
title = "Relación entre edad y abandono",
subtitle = "Línea vertical marca los 50 años",
x = "Edad",
y = "Probabilidad de abandono"
) +
theme_minimal()
dev.off()
# 4. Visualización de tipo de suscripción vs abandono
png("img/suscripcion_vs_abandono.png", width = 800, height = 600)
ggplot(df, aes(x = tipo_suscripcion, fill = factor(abandona))) +
geom_bar(position = "fill") +
scale_fill_manual(
values = c("steelblue", "tomato"),
name = "Abandona",
labels = c("No", "Sí")
) +
labs(
title = "Tasa de abandono por tipo de suscripción",
x = "Tipo de suscripción",
y = "Proporción"
) +
theme_minimal()
dev.off()
# Modelo lineal: abandono en función de 'dias_ultimo_inicio'
modelo_lineal_simple <- lm(abandona ~ dias_ultimo_inicio, data = df)
# Resumen del modelo
summary(modelo_lineal_simple)
# Visualización del ajuste del modelo lineal
ggplot(df, aes(x = dias_ultimo_inicio, y = abandona)) +
geom_jitter(height = 0.05, width = 0.3, alpha = 0.3, color = "darkblue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(
title = "Modelo lineal simple: abandono ~ días sin iniciar sesión",
x = "Días desde el último inicio de sesión",
y = "Probabilidad estimada de abandono"
) +
theme_minimal()
# Ajustamos un modelo logístico usando 'dias_ultimo_inicio' como predictor
modelo_logistico_simple <- glm(abandona ~ dias_ultimo_inicio, data = df, family = "binomial")
# Resumen del modelo
summary(modelo_logistico_simple)
# Visualización del ajuste del modelo logístico
ggplot(df, aes(x = dias_ultimo_inicio, y = abandona)) +
geom_jitter(height = 0.05, width = 0.3, alpha = 0.3, color = "darkblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "darkred") +
labs(
title = "Modelo logístico simple: abandono ~ días sin iniciar sesión",
x = "Días desde el último inicio de sesión",
y = "Probabilidad estimada de abandono"
) +
theme_minimal()
# Creamos un modelo logístico con múltiples variables:
modelo_logistico_multiple <- glm(
abandona ~ dias_ultimo_inicio + canciones_por_semana +
listas_creadas + edad + tipo_suscripcion,
data = df, family = "binomial"
)
# Modelo lineal: abandono en función de 'dias_ultimo_inicio'
modelo_lineal_simple <- lm(abandona ~ dias_ultimo_inicio, data = df)
# Resumen del modelo
summary(modelo_lineal_simple)
# Visualización del ajuste del modelo lineal
png("img/modelo_lineal.png", width = 800, height = 600)
ggplot(df, aes(x = dias_ultimo_inicio, y = abandona)) +
geom_jitter(height = 0.05, width = 0.3, alpha = 0.3, color = "darkblue") +
geom_smooth(method = "lm", se = TRUE, color = "red") +
labs(
title = "Modelo lineal simple: abandono ~ días sin iniciar sesión",
x = "Días desde el último inicio de sesión",
y = "Probabilidad estimada de abandono"
) +
theme_minimal()
dev.off()
# Ajustamos un modelo logístico usando 'dias_ultimo_inicio' como predictor
modelo_logistico_simple <- glm(abandona ~ dias_ultimo_inicio, data = df, family = "binomial")
# Resumen del modelo
summary(modelo_logistico_simple)
# Visualización del ajuste del modelo logístico
png("img/modelo_logistico_simple.png", width = 800, height = 600)
ggplot(df, aes(x = dias_ultimo_inicio, y = abandona)) +
geom_jitter(height = 0.05, width = 0.3, alpha = 0.3, color = "darkblue") +
stat_smooth(method = "glm", method.args = list(family = "binomial"), se = TRUE, color = "darkred") +
labs(
title = "Modelo logístico simple: abandono ~ días sin iniciar sesión",
x = "Días desde el último inicio de sesión",
y = "Probabilidad estimada de abandono"
) +
theme_minimal()
dev.off()
# Creamos un modelo logístico con múltiples variables:
modelo_logistico_multiple <- glm(
abandona ~ dias_ultimo_inicio + canciones_por_semana +
listas_creadas + edad + tipo_suscripcion,
data = df, family = "binomial"
)
# Resumen del modelo
summary(modelo_logistico_multiple)
# Visualización de efectos marginales: probabilidad predicha según días de inactividad y tipo de suscripción
pred <- ggpredict(
modelo_logistico_multiple,
terms = c("dias_ultimo_inicio", "tipo_suscripcion")
)
png("img/modelo_logistico_multiple.png", width = 800, height = 600)
ggplot(pred, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1.2) +
labs(
title = "Probabilidad de abandono según días sin iniciar sesión y tipo de suscripción",
x = "Días desde el último inicio de sesión",
y = "Probabilidad predicha",
color = "Tipo de suscripción"
) +
theme_minimal()
dev.off()
modelo_interaccion <- glm(
abandona ~ dias_ultimo_inicio * tipo_suscripcion +
canciones_por_semana + listas_creadas + edad,
data = df, family = "binomial"
)
# Resumen del modelo con interacción
summary(modelo_interaccion)
# Visualización del efecto de la interacción
pred_inter <- ggpredict(
modelo_interaccion,
terms = c("dias_ultimo_inicio", "tipo_suscripcion")
)
png("img/modelo_interaccion.png", width = 800, height = 600)
ggplot(pred_inter, aes(x = x, y = predicted, color = group)) +
geom_line(size = 1.2) +
labs(
title = "Interacción: efecto de días sin iniciar sesión según tipo de suscripción",
x = "Días desde el último inicio",
y = "Probabilidad predicha de abandono",
color = "Tipo de suscripción"
) +
theme_minimal()
dev.off()
# Instalamos el paquete si no está disponible
if (!require("nnet")) install.packages("nnet")
library(nnet)
# Preparamos los datos: convertimos variables categóricas a numéricas
df_nn <- df %>%
mutate(
tipo_suscripcion = as.numeric(factor(tipo_suscripcion)),
genero_favorito = as.numeric(factor(genero_favorito)),
sexo = as.numeric(factor(sexo))
)
# Normalizamos las variables numéricas para facilitar el entrenamiento
df_nn_scaled <- df_nn %>%
mutate(across(
c(dias_ultimo_inicio, canciones_por_semana, listas_creadas, edad),
~ scale(.)[, 1]
))
# Entrenamos una red neuronal con una capa oculta de 5 nodos
set.seed(123) # para reproducibilidad
modelo_red_neuronal <- nnet(
abandona ~ dias_ultimo_inicio + canciones_por_semana + listas_creadas + edad +
tipo_suscripcion + genero_favorito + sexo,
data = df_nn_scaled,
size = 5, # número de neuronas en la capa oculta
maxit = 500, # número máximo de iteraciones
decay = 0.01, # regularización
linout = FALSE # salida logística, ideal para clasificación binaria
)
# Resumen de la red
print(modelo_red_neuronal)
# Predicción sobre los mismos datos
df_nn_scaled$pred_nn <- predict(modelo_red_neuronal, type = "raw")
# Visualización: comparativa de predicción según tipo de suscripción
png("img/modelo_red_neuronal.png", width = 800, height = 600)
ggplot(df_nn_scaled, aes(x = dias_ultimo_inicio, y = pred_nn, color = factor(tipo_suscripcion))) +
geom_point(alpha = 0.5) +
labs(
title = "Red neuronal: predicción de abandono",
x = "Días desde último inicio de sesión",
y = "Probabilidad estimada",
color = "Tipo de suscripción"
) +
theme_minimal()
dev.off()
# Cargamos los paquetes necesarios
library(yardstick) # para métricas de clasificación
library(pROC) # para calcular curvas ROC y AUC
# Creamos una nueva tabla con predicciones de todos los modelos
df_evaluacion <- df_nn_scaled %>%
mutate(
pred_lineal = predict(modelo_lineal_simple, newdata = df, type = "response"),
pred_log_simple = predict(modelo_logistico_simple, type = "response"),
pred_log_multiple = predict(modelo_logistico_multiple, type = "response"),
pred_interaccion = predict(modelo_interaccion, type = "response")
) %>%
mutate(
abandonado = factor(abandona, levels = c(0, 1), labels = c("no", "sí"))
)
# Creamos una función para calcular métricas básicas
evaluar_modelo <- function(predicciones, verdad) {
tibble(
verdad = verdad,
pred_prob = predicciones,
pred_clase = factor(ifelse(predicciones > 0.5, "sí", "no"), levels = c("no", "sí"))
) %>%
metrics(truth = verdad, estimate = pred_clase)
}
# Evaluamos los modelos
eval_lineal <- evaluar_modelo(df_evaluacion$pred_lineal, df_evaluacion$abandonado)
eval_log_simple <- evaluar_modelo(df_evaluacion$pred_log_simple, df_evaluacion$abandonado)
eval_log_multiple <- evaluar_modelo(df_evaluacion$pred_log_multiple, df_evaluacion$abandonado)
eval_interaccion <- evaluar_modelo(df_evaluacion$pred_interaccion, df_evaluacion$abandonado)
eval_nn <- evaluar_modelo(df_evaluacion$pred_nn, df_evaluacion$abandonado)
# Unimos los resultados en una tabla
evaluacion_total <- bind_rows(
mutate(eval_lineal, modelo = "Lineal simple"),
mutate(eval_log_simple, modelo = "Logístico simple"),
mutate(eval_log_multiple, modelo = "Logístico múltiple"),
mutate(eval_interaccion, modelo = "Logístico con interacción"),
mutate(eval_nn, modelo = "Red neuronal")
)
# Mostramos la tabla final de evaluación
print(evaluacion_total)
# Comparación visual de curvas ROC
roc_lineal <- roc(df_evaluacion$abandonado, df_evaluacion$pred_lineal)
roc_log_simple <- roc(df_evaluacion$abandonado, df_evaluacion$pred_log_simple)
roc_log_multiple <- roc(df_evaluacion$abandonado, df_evaluacion$pred_log_multiple)
roc_interaccion <- roc(df_evaluacion$abandonado, df_evaluacion$pred_interaccion)
roc_nn <- roc(df_evaluacion$abandonado, df_evaluacion$pred_nn)
png("img/curvas_roc.png", width = 800, height = 600)
plot(roc_log_simple, col = "blue", lwd = 2, main = "Curvas ROC de los modelos")
lines(roc_log_multiple, col = "green", lwd = 2)
lines(roc_interaccion, col = "purple", lwd = 2)
lines(roc_nn, col = "orange", lwd = 2)
lines(roc_lineal, col = "gray", lwd = 2, lty = 2)
legend("bottomright",
legend = c("Logístico simple", "Logístico múltiple", "Interacción", "Red neuronal", "Lineal simple"),
col = c("blue", "green", "purple", "orange", "gray"),
lwd = 2, lty = c(1, 1, 1, 1, 2)
)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(nls2)
set.seed(123)
tiempo <- 1:30
# Generamos datos con forma logística + ruido
androides <- 60 / (1 + exp(-0.3 * (tiempo - 15))) + rnorm(30, mean = 0, sd = 1.5)
# Representación de los datos
ggplot(data.frame(tiempo, androides), aes(x = tiempo, y = androides)) +
geom_point(color = "darkgreen", size = 3) +
labs(title = "Evolución del número de androides",
x = "Tiempo (meses)",
y = "Nº de androides") +
theme_minimal()
modelo_lineal <- lm(androides ~ tiempo)
summary(modelo_lineal)
# Visualización del modelo lineal
ggplot(data.frame(tiempo, androides), aes(x = tiempo, y = androides)) +
geom_point(color = "darkgreen", size = 3) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
labs(title = "Ajuste con regresión lineal",
x = "Tiempo (meses)",
y = "Nº de androides") +
theme_minimal()
modelo_poly2 <- lm(androides ~ poly(tiempo, 2, raw = TRUE))
summary(modelo_poly2)
# Visualización del modelo polinomial
ggplot(data.frame(tiempo, androides), aes(x = tiempo, y = androides)) +
geom_point(color = "darkgreen", size = 3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "blue", se = FALSE) +
labs(title = "Ajuste con regresión polinomial",
x = "Tiempo (meses)",
y = "Nº de androides") +
theme_minimal()
modelo_poly2 <- lm(androides ~ poly(tiempo, 2, raw = TRUE))
summary(modelo_poly2)
# Visualización del modelo polinomial
ggplot(data.frame(tiempo, androides), aes(x = tiempo, y = androides)) +
geom_point(color = "darkgreen", size = 3) +
geom_smooth(method = "lm", formula = y ~ poly(x, 3), color = "blue", se = FALSE) +
labs(title = "Ajuste con regresión polinomial",
x = "Tiempo (meses)",
y = "Nº de androides") +
theme_minimal()
# Ajuste del modelo logístico
modelo_logistico <- nls(androides ~ M / (1 + exp(-k*(tiempo - t0))),
start = list(M = 60, k = 0.3, t0 = 15),
data = data.frame(tiempo, androides))
summary(modelo_logistico)
# Visualización del modelo logístico
pred_logistico <- predict(modelo_logistico)
ggplot(data.frame(tiempo, androides), aes(x = tiempo, y = androides)) +
geom_point(color = "darkgreen", size = 3) +
geom_line(aes(y = pred_logistico), color = "purple", size = 1.5) +
labs(title = "Ajuste con modelo logístico",
x = "Tiempo (meses)",
y = "Nº de androides") +
theme_minimal()
# Ajuste con splines
library(splines)
modelo_splines <- lm(androides ~ bs(tiempo, df = 5))
summary(modelo_splines)
# Visualización del modelo con splines
pred_splines <- predict(modelo_splines)
ggplot(data.frame(tiempo, androides), aes(x = tiempo, y = androides)) +
geom_point(color = "darkgreen", size = 3) +
geom_line(aes(y = pred_splines), color = "orange", size = 1.5) +
labs(title = "Ajuste con splines",
x = "Tiempo (meses)",
y = "Nº de androides") +
theme_minimal()
# Calculamos AIC y BIC para cada modelo
AIC_lineal <- AIC(modelo_lineal)
AIC_poly2 <- AIC(modelo_poly2)
AIC_logistico <- AIC(modelo_logistico)
AIC_splines <- AIC(modelo_splines)
BIC_lineal <- BIC(modelo_lineal)
BIC_poly2 <- BIC(modelo_poly2)
BIC_logistico <- BIC(modelo_logistico)
BIC_splines <- BIC(modelo_splines)
# Creamos una tabla comparativa
comparacion <- data.frame(
Modelo = c("Lineal", "Polinomial", "Logístico", "Splines"),
AIC = c(AIC_lineal, AIC_poly2, AIC_logistico, AIC_splines),
BIC = c(BIC_lineal, BIC_poly2, BIC_logistico, BIC_splines)
)
# Visualización de todos los modelos
ggplot(data.frame(tiempo, androides), aes(x = tiempo, y = androides)) +
geom_point(color = "darkgreen", size = 3) +
geom_smooth(method = "lm", color = "red", se = FALSE) +
geom_smooth(method = "lm", formula = y ~ poly(x, 2), color = "blue", se = FALSE) +
geom_line(aes(y = pred_logistico), color = "purple", size = 1.5) +
geom_line(aes(y = pred_splines), color = "orange", size = 1.5) +
labs(title = "Comparación de modelos",
x = "Tiempo (meses)",
y = "Nº de androides") +
theme_minimal() +
scale_color_manual(values = c("red", "blue", "purple", "orange"),
labels = c("Lineal", "Polinomial", "Logístico", "Splines"))
