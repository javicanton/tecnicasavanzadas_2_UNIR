ggtitle("Gráfico con ggplot2")
# Crear un gráfico con ggplot2
df <- data.frame(x = c(1, 2, 3, 4, 5), y = c(3, 5, 7, 10, 11))
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_line() +
ggtitle("Gráfico con ggplot2")
# Ejecución del curso
swirl()
#install.packages("devtools", "bitops", "RCurl", "stringi", "httr", "swirl")
library(devtools)
library(bitops)
library(RCurl)
library(httr)
library(swirl)
set_config( config( ssl_verifypeer = 0L ) )
if (file.exists("/opt/R/home/library/swirl/Courses/Programando_en_R")) {
uninstall_course("Programando_en_R")
}
install_course_github('josersosa','Programando_en_R')
select_language(language = "spanish")
# Ejecución del curso
swirl()
# Cargar el dataset
data(iris)
# Mostrar las primeras filas
head(iris)
View(iris)
# 2. Exploración básica del dataset
# Ver la estructura del dataset
str(iris)
# Resumen estadístico de las variables
summary(iris)
# Nombres de las columnas
colnames(iris)
# Dimensiones del dataset (filas y columnas)
dim(iris)
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
sd(iris$Sepal.Length)
# Contar valores por categoría
table(iris$Species)
# 4. Filtrado de datos
# Seleccionar solo las filas donde la especie es "setosa"
setosa <- subset(iris, Species == "setosa")
setosa <- (iris$Sepal.Length = "setosa")
# Cargar el dataset
data(iris)
setosa <- (iris$Sepal.Length = "setosa")
setosa <- (iris$Sepal.Length == "setosa")
# 4. Filtrado de datos
# Seleccionar solo las filas donde la especie es "setosa"
setosa <- subset(iris, Species == "setosa")
View(setosa)
# Seleccionar solo columnas numéricas
iris_numeric <- iris[, 1:4]
head(iris_numeric)
# 5. Visualización de datos
# Histograma de la longitud del sépalo
hist(iris$Sepal.Length, main = "Histograma de Sepal Length", col = "blue", xlab = "Sepal Length")
# Diagrama de dispersión entre dos variables
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species,
main = "Relación entre Sepal Length y Sepal Width", xlab = "Sepal Length", ylab = "Sepal Width")
# 5. Visualización de datos
# Histograma de la longitud del sépalo
hist(iris$Sepal.Length, main = "Histograma de Sepal Length", col = "blue", xlab = "Sepal Length")
# Diagrama de dispersión entre dos variables
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species,
main = "Relación entre Sepal Length y Sepal Width", xlab = "Sepal Length", ylab = "Sepal Width")
# Cargar el dataset
data(iris)
# Mostrar las primeras filas
head(iris)
# 2. Exploración básica del dataset
# Ver la estructura del dataset
str(iris)
# Resumen estadístico de las variables
summary(iris)
# Nombres de las columnas
colnames(iris)
# Dimensiones del dataset (filas y columnas)
dim(iris)
# 3. Análisis descriptivo
# Media, mediana y desviación estándar de una variable numérica
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
sd(iris$Sepal.Length)
# Contar valores por categoría
table(iris$Species)
# 4. Filtrado de datos
# Seleccionar solo las filas donde la especie es "setosa"
setosa <- subset(iris, Species == "setosa")
head(setosa)
# Seleccionar solo columnas numéricas
iris_numeric <- iris[, 1:4]
head(iris_numeric)
# 5. Visualización de datos
# Histograma de la longitud del sépalo
hist(iris$Sepal.Length, main = "Histograma de Sepal Length", col = "blue", xlab = "Sepal Length")
# Diagrama de dispersión entre dos variables
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species,
main = "Relación entre Sepal Length y Sepal Width", xlab = "Sepal Length", ylab = "Sepal Width")
# 6. Gráficos avanzados con ggplot2
library(ggplot2)
# Gráfico de dispersión coloreado por especie
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Relación entre Sepal Length y Sepal Width por especie")
# Boxplot de la longitud del sépalo por especie
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
ggtitle("Distribución de Sepal Length por especie")
# 7. Correlación entre variables
cor(iris_numeric)
# 8. Modelos de regresión
modelo <- lm(Sepal.Length ~ Sepal.Width, data = iris)
summary(modelo)
# Agregar la recta de regresión al gráfico de dispersión
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
ggtitle("Regresión lineal entre Sepal Width y Sepal Length")
# 9. Análisis Clúster: Agrupamiento K-Means
set.seed(123)  # Para reproducibilidad
kmeans_result <- kmeans(iris_numeric, centers = 3)
# Añadir los clusters al dataset
iris$Cluster <- as.factor(kmeans_result$cluster)
# Visualizar clusters
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point() +
ggtitle("Agrupamiento K-Means en el dataset iris")
# 10. Gráficos interactivos con plotly
library(plotly)
# Convertir un gráfico de ggplot2 a interactivo
grafico_interactivo <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Gráfico interactivo con Plotly")
# Mostrar el gráfico interactivo
ggplotly(grafico_interactivo)
library(datasauRus)
library(ggplot2)
library(dplyr)
# Explorar el Cuarteto de Anscombe
# Cargar los datos
data("anscombe")
# Mostrar los datos originales del Cuarteto de Anscombe
cat("\nDatos originales del Cuarteto de Anscombe:\n")
datos_anscombe <- data.frame(
x1 = anscombe$x1, y1 = anscombe$y1,
x2 = anscombe$x2, y2 = anscombe$y2,
x3 = anscombe$x3, y3 = anscombe$y3,
x4 = anscombe$x4, y4 = anscombe$y4
)
print(datos_anscombe, row.names = FALSE)
View(datos_anscombe)
c(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
# Calcular estadísticas descriptivas para cada conjunto
# Función auxiliar para calcular estadísticas
calcular_estadisticas <- function(x, y) {
c(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
}
View(calcular_estadisticas)
# Calcular estadísticas para cada conjunto
estadisticas <- data.frame(
conjunto1 = calcular_estadisticas(anscombe$x1, anscombe$y1),
conjunto2 = calcular_estadisticas(anscombe$x2, anscombe$y2),
conjunto3 = calcular_estadisticas(anscombe$x3, anscombe$y3),
conjunto4 = calcular_estadisticas(anscombe$x4, anscombe$y4)
)
print(estadisticas)
View(estadisticas)
cat("\nObservaciones sobre las estadísticas:\n")
cat("1. Todos los conjuntos tienen una media de X de 9.0000\n")
cat("2. Todos los conjuntos tienen una media de Y cercana a 7.5009\n")
cat("3. Las desviaciones estándar de X son aproximadamente 3.3166\n")
cat("4. Las desviaciones estándar de Y son aproximadamente 2.0316\n")
cat("5. Las correlaciones son todas cercanas a 0.8164\n")
# Crear un gráfico mejorado del Cuarteto de Anscombe
anscombe_long <- data.frame(
x = c(anscombe$x1, anscombe$x2, anscombe$x3, anscombe$x4),
y = c(anscombe$y1, anscombe$y2, anscombe$y3, anscombe$y4),
conjunto = rep(1:4, each = 11)
)
p1 <- ggplot(anscombe_long, aes(x = x, y = y)) +
geom_point(color = "steelblue", size = 2) +
facet_wrap(~conjunto, ncol = 2) +
theme_minimal() +
labs(
title = "El Cuarteto de Anscombe",
subtitle = "Cuatro conjuntos de datos con estadísticas similares"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray")
)
# Guardar el gráfico
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
p1
# Explorar el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
# Mostrar los datos originales del Datasaurus (primeros 5 registros de cada conjunto)
cat("\nPrimeros 5 registros de cada conjunto del Datasaurus:\n")
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
print(datos_datasaurus, row.names = FALSE)
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
# Mostrar los datos originales del Datasaurus (primeros 5 registros de cada conjunto)
cat("\nPrimeros 5 registros de cada conjunto del Datasaurus:\n")
library(datasauRus)
library(ggplot2)
library(dplyr)
# Explorar el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
print(datos_datasaurus, row.names = FALSE)
# Mostrar los datos originales del Datasaurus (primeros 5 registros de cada conjunto)
cat("\nPrimeros 5 registros de cada conjunto del Datasaurus:\n")
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
library(datasauRus)
library(ggplot2)
library(dplyr)
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
# Explorar el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
# Mostrar los datos originales del Datasaurus (primeros 5 registros de cada conjunto)
cat("\nPrimeros 5 registros de cada conjunto del Datasaurus:\n")
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
detach("package:dplyr", unload = TRUE)
library(dplyr)
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
library(datasauRus)
library(ggplot2)
library(dplyr)
# Explorar el Cuarteto de Anscombe
# Cargar los datos
data("anscombe")
# Mostrar los datos originales del Cuarteto de Anscombe
cat("\nDatos originales del Cuarteto de Anscombe:\n")
datos_anscombe <- data.frame(
x1 = anscombe$x1, y1 = anscombe$y1,
x2 = anscombe$x2, y2 = anscombe$y2,
x3 = anscombe$x3, y3 = anscombe$y3,
x4 = anscombe$x4, y4 = anscombe$y4
)
print(datos_anscombe, row.names = FALSE)
# Calcular estadísticas descriptivas para cada conjunto
# Función auxiliar para calcular estadísticas
calcular_estadisticas <- function(x, y) {
c(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
}
# Calcular estadísticas para cada conjunto
estadisticas <- data.frame(
conjunto1 = calcular_estadisticas(anscombe$x1, anscombe$y1),
conjunto2 = calcular_estadisticas(anscombe$x2, anscombe$y2),
conjunto3 = calcular_estadisticas(anscombe$x3, anscombe$y3),
conjunto4 = calcular_estadisticas(anscombe$x4, anscombe$y4)
)
# Mostrar estadísticas
cat("\nEstadísticas descriptivas del Cuarteto de Anscombe:\n")
print(estadisticas)
cat("\nObservaciones sobre las estadísticas:\n")
cat("1. Todos los conjuntos tienen una media de X de 9.0000\n")
cat("2. Todos los conjuntos tienen una media de Y cercana a 7.5009\n")
cat("3. Las desviaciones estándar de X son aproximadamente 3.3166\n")
cat("4. Las desviaciones estándar de Y son aproximadamente 2.0316\n")
cat("5. Las correlaciones son todas cercanas a 0.8164\n")
# Crear un gráfico mejorado del Cuarteto de Anscombe
anscombe_long <- data.frame(
x = c(anscombe$x1, anscombe$x2, anscombe$x3, anscombe$x4),
y = c(anscombe$y1, anscombe$y2, anscombe$y3, anscombe$y4),
conjunto = rep(1:4, each = 11)
)
p1 <- ggplot(anscombe_long, aes(x = x, y = y)) +
geom_point(color = "steelblue", size = 2) +
facet_wrap(~conjunto, ncol = 2) +
theme_minimal() +
labs(
title = "El Cuarteto de Anscombe",
subtitle = "Cuatro conjuntos de datos con estadísticas similares"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray")
)
# Guardar el gráfico
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
# Explorar el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
# Mostrar los datos originales del Datasaurus (primeros 5 registros de cada conjunto)
cat("\nPrimeros 5 registros de cada conjunto del Datasaurus:\n")
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
library(tidyr)
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
print(datos_datasaurus, row.names = FALSE)
library(dplyr)
library(tidyr)
# Explorar el Cuarteto de Anscombe
# Cargar los datos
data("anscombe")
# Mostrar los datos originales del Cuarteto de Anscombe
cat("\nDatos originales del Cuarteto de Anscombe:\n")
datos_anscombe <- data.frame(
x1 = anscombe$x1, y1 = anscombe$y1,
x2 = anscombe$x2, y2 = anscombe$y2,
x3 = anscombe$x3, y3 = anscombe$y3,
x4 = anscombe$x4, y4 = anscombe$y4
)
print(datos_anscombe, row.names = FALSE)
# Calcular estadísticas descriptivas para cada conjunto
# Función auxiliar para calcular estadísticas
calcular_estadisticas <- function(x, y) {
c(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
}
# Calcular estadísticas para cada conjunto
estadisticas <- data.frame(
conjunto1 = calcular_estadisticas(anscombe$x1, anscombe$y1),
conjunto2 = calcular_estadisticas(anscombe$x2, anscombe$y2),
conjunto3 = calcular_estadisticas(anscombe$x3, anscombe$y3),
conjunto4 = calcular_estadisticas(anscombe$x4, anscombe$y4)
)
# Mostrar estadísticas
cat("\nEstadísticas descriptivas del Cuarteto de Anscombe:\n")
print(estadisticas)
cat("\nObservaciones sobre las estadísticas:\n")
cat("1. Todos los conjuntos tienen una media de X de 9.0000\n")
cat("2. Todos los conjuntos tienen una media de Y cercana a 7.5009\n")
cat("3. Las desviaciones estándar de X son aproximadamente 3.3166\n")
cat("4. Las desviaciones estándar de Y son aproximadamente 2.0316\n")
cat("5. Las correlaciones son todas cercanas a 0.8164\n")
# Crear un gráfico mejorado del Cuarteto de Anscombe
anscombe_long <- data.frame(
x = c(anscombe$x1, anscombe$x2, anscombe$x3, anscombe$x4),
y = c(anscombe$y1, anscombe$y2, anscombe$y3, anscombe$y4),
conjunto = rep(1:4, each = 11)
)
p1 <- ggplot(anscombe_long, aes(x = x, y = y)) +
geom_point(color = "steelblue", size = 2) +
facet_wrap(~conjunto, ncol = 2) +
theme_minimal() +
labs(
title = "El Cuarteto de Anscombe",
subtitle = "Cuatro conjuntos de datos con estadísticas similares"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray")
)
# Guardar el gráfico
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
ggsave("anscombe_plot.png", p1, width = 10, height = 8)
# Explorar el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
# Mostrar los datos originales del Datasaurus (primeros 5 registros de cada conjunto)
cat("\nPrimeros 5 registros de cada conjunto del Datasaurus:\n")
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
print(datos_datasaurus, row.names = FALSE)
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
pivot_wider(names_from = dataset, values_from = c(x, y))
# Explorar el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
# Mostrar los datos de forma más simple, sin pivot_wider
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
select(dataset, x, y)
print(datos_datasaurus, row.names = FALSE)
# Calcular estadísticas para cada conjunto del Datasaurus
estadisticas_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
summarise(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
# Convertir a data.frame y redondear los valores
estadisticas_datasaurus <- as.data.frame(estadisticas_datasaurus)
estadisticas_datasaurus[, -1] <- round(estadisticas_datasaurus[, -1], 4)
# Mostrar estadísticas
cat("\nEstadísticas descriptivas del Datasaurus:\n")
print(estadisticas_datasaurus, row.names = FALSE)
cat("\nObservaciones sobre las estadísticas:\n")
cat("1. Todos los conjuntos tienen una media de X cercana a 54.26\n")
cat("2. Todos los conjuntos tienen una media de Y cercana a 47.83\n")
cat("3. Las desviaciones estándar de X son aproximadamente 16.76\n")
cat("4. Las desviaciones estándar de Y son aproximadamente 26.93\n")
cat("5. Las correlaciones son todas cercanas a -0.06\n")
# Crear un gráfico mejorado del Datasaurus
p2 <- ggplot(datasaurus_dozen, aes(x = x, y = y)) +
geom_point(color = "steelblue", alpha = 0.6, size = 0.8) +
facet_wrap(~dataset, ncol = 4) +
theme_minimal() +
labs(
title = "El Datasaurus",
subtitle = "Conjuntos de datos con estadísticas similares"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray"),
strip.text = element_text(size = 8),
axis.text = element_text(size = 6)
)
p2
# Mostrar los datos originales del Datasaurus (primeros 5 registros de cada conjunto)
cat("\nPrimeros 5 registros de cada conjunto del Datasaurus:\n")
# Mostrar los datos de forma más simple, sin pivot_wider
datos_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
slice_head(n = 5) %>%
select(dataset, x, y)
print(datos_datasaurus, row.names = FALSE)
# Calcular estadísticas para cada conjunto del Datasaurus
estadisticas_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
summarise(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
# Convertir a data.frame y redondear los valores
estadisticas_datasaurus <- as.data.frame(estadisticas_datasaurus)
estadisticas_datasaurus[, -1] <- round(estadisticas_datasaurus[, -1], 4)
# Mostrar estadísticas
cat("\nEstadísticas descriptivas del Datasaurus:\n")
print(estadisticas_datasaurus, row.names = FALSE)
View(estadisticas_datasaurus)
cat("\nObservaciones sobre las estadísticas:\n")
cat("1. Todos los conjuntos tienen una media de X cercana a 54.26\n")
cat("2. Todos los conjuntos tienen una media de Y cercana a 47.83\n")
cat("3. Las desviaciones estándar de X son aproximadamente 16.76\n")
cat("4. Las desviaciones estándar de Y son aproximadamente 26.93\n")
cat("5. Las correlaciones son todas cercanas a -0.06\n")
# Crear un gráfico mejorado del Datasaurus
p2 <- ggplot(datasaurus_dozen, aes(x = x, y = y)) +
geom_point(color = "steelblue", alpha = 0.6, size = 0.8) +
facet_wrap(~dataset, ncol = 4) +
theme_minimal() +
labs(
title = "El Datasaurus",
subtitle = "Conjuntos de datos con estadísticas similares"
) +
theme(
plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray"),
strip.text = element_text(size = 8),
axis.text = element_text(size = 6)
)
p2
