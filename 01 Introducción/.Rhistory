library(shiny)
library(tidyverse)
library(datos)
# Definir la interfaz de usuario para la aplicación Shiny
ui <- fluidPage(
titlePanel("Visualización Interactiva de Datos con R"),
sidebarLayout(
sidebarPanel(
selectInput("xvar", "Variable en el eje X:", choices = names(diamantes), selected = "quilates"),
selectInput("yvar", "Variable en el eje Y:", choices = names(diamantes), selected = "precio"),
selectInput("colorvar", "Variable para color:", choices = names(diamantes), selected = "claridad")
),
mainPanel(
plotlyOutput("scatterPlot")
)
)
)
# Definir la lógica del servidor para la aplicación Shiny
server <- function(input, output) {
output$scatterPlot <- renderPlotly({
p <- ggplot(diamantes, aes_string(x = input$xvar, y = input$yvar, color = input$colorvar)) +
geom_point() +
theme_minimal()
ggplotly(p)
})
}
# Ejecutar la aplicación Shiny
shinyApp(ui = ui, server = server)
# Gráfico personalizado con etiquetas y tema minimalista
# Incluye un título, etiquetas para los ejes y una paleta de colores mejorada
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price, color = clarity)) +
labs(
title = "Correlación de Peso en Quilates y Precio del Diamante",
x = "Peso en Quilates",
y = "Precio (USD)",
color = "Claridad"
) +
theme_dark()
if (!require("devtools")) install.packages("devtools")
if (!require("bitops")) install.packages("bitops")
if (!require("RCurl")) install.packages("RCurl")
if (!require("stringi")) install.packages("stringi")
if (!require("httr")) install.packages("httr")
if (!require("swirl")) install.packages("swirl")
library(devtools)
library(bitops)
library(RCurl)
library(httr)
library(swirl)
library(devtools)
library(bitops)
library(RCurl)
library(httr)
library(swirl)
set_config( config( ssl_verifypeer = 0L ) )
if (file.exists("/opt/R/home/library/swirl/Courses/Programando_en_R")) {
uninstall_course("Programando_en_R")
}
install_course_github('josersosa','Programando_en_R')
select_language(language = "spanish")
swirl()
5+7
0
info()
main()
install.packages(c("anytime", "bit", "broom.helpers", "bslib", "cards", "classInt", "cli", "cluster", "cpp11", "curl", "data.table", "deldir", "e1071", "esquisse", "forecast", "fracdiff", "fs", "gert", "ggrepel", "hexbin", "httr2", "hunspell", "igraph", "jsonlite", "KernSmooth", "later", "leaps", "lintr", "lwgeom", "mgcv", "nlme", "nloptr", "openNLPdata", "openssl", "openxlsx", "parallelly", "PBSmapping", "processx", "promises", "ps", "purrr", "qdap", "qpdf", "R.utils", "R6", "ragg", "randomForest", "raster", "Rcpp", "RcppArmadillo", "RcppTOML", "readxl", "reticulate", "rJava", "rjson", "s2", "sessioninfo", "sf", "shiny", "shinyWidgets", "slam", "sp", "spacesXYZ", "SparseM", "SuppDists", "svglite", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "tm", "tseries", "units", "urca", "venneuler", "wk", "xfun", "xml2", "zip", "zoo"))
# 2. Imprimir en pantalla
print("¡Hola, mundo!")  # Muestra texto en la consola
# 3. Variables y tipos de datos
x <- 10         # Asignación de un número entero
pi_val <- 3.14  # Números decimales (doble precisión)
texto <- "R es genial"  # Cadenas de texto
logico <- TRUE   # Valores lógicos (TRUE o FALSE)
# Mostrar el valor de una variable
print(x)
print(texto)
# 4. Operaciones matemáticas básicas
a <- 5
b <- 2
suma <- a + b
resta <- a - b
suma <- a + b
resta <- a - b
multiplicacion <- a * b
division <- a / b
potencia <- a^b
raiz_cuadrada <- sqrt(a)
# Mostrar resultados
print(suma)
print(raiz_cuadrada)
# 5. Vectores en R (listas de datos del mismo tipo)
numeros <- c(1, 2, 3, 4, 5)
print(numeros)
# Operaciones con vectores
numeros_dobles <- numeros * 2  # Multiplica cada elemento por 2
print(numeros_dobles)
# Seleccionar elementos de un vector
print(numeros[1])  # Primer elemento
print(numeros[2:4])  # Del segundo al cuarto
# 6. Factores (variables categóricas)
colores <- factor(c("rojo", "azul", "verde", "rojo", "azul"))
print(colores)
# 7. DataFrames (tablas de datos)
datos <- data.frame(
Nombre = c("Ana", "Carlos", "Beatriz"),
Edad = c(23, 35, 29),
Ciudad = c("Madrid", "Barcelona", "Sevilla")
)
print(datos)
# Acceder a una columna
datos$Edad
# Seleccionar una fila específica
datos[2, ]  # Segunda fila
# Seleccionar una celda específica
datos[2, "Ciudad"]
# 8. Condicionales y bucles
if (x > 5) {
print("x es mayor que 5")
} else {
print("x es menor o igual a 5")
}
# Bucle for
for (i in 1:5) {
print(paste("Iteración número", i))
}
# Bucle while
contador <- 1
while (contador <= 3) {
print(paste("Valor de contador:", contador))
contador <- contador + 1
}
# 9. Funciones en R
doble <- function(numero) {
return(numero * 2)
}
resultado <- doble(4)
print(resultado)
# Función con múltiples argumentos
suma_numeros <- function(a, b) {
return(a + b)
}
print(suma_numeros(10, 20))
# 10. Gráficos básicos con R
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
plot(x, y, type = "b", col = "blue", main = "Gráfico en R")
# 11. Librerías en R
# Algunas funciones avanzadas requieren paquetes externos
install.packages("ggplot2")  # Instalar un paquete (solo una vez)
library(ggplot2)  # Cargar la librería
# Crear un gráfico con ggplot2
df <- data.frame(x = c(1, 2, 3, 4, 5), y = c(3, 5, 7, 9, 11))
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_line() +
ggtitle("Gráfico con ggplot2")
# Cargar el dataset
data(iris)
# Mostrar las primeras filas
head(iris)
# 2. Exploración básica del dataset
# Ver la estructura del dataset
str(iris)
# Resumen estadístico de las variables
summary(iris)
# Nombres de las columnas
colnames(iris)
# Dimensiones del dataset (filas y columnas)
dim(iris)
# 3. Análisis descriptivo
# Media, mediana y desviación estándar de una variable numérica
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
sd(iris$Sepal.Length)
# Contar valores por categoría
table(iris$Species)
# 4. Filtrado de datos
# Seleccionar solo las filas donde la especie es "setosa"
setosa <- subset(iris, Species == "setosa")
head(setosa)
# Seleccionar solo columnas numéricas
iris_numeric <- iris[, 1:4]
head(iris_numeric)
# 5. Visualización de datos
# Histograma de la longitud del sépalo
hist(iris$Sepal.Length, main = "Histograma de Sepal Length", col = "blue", xlab = "Sepal Length")
# Diagrama de dispersión entre dos variables
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species,
main = "Relación entre Sepal Length y Sepal Width", xlab = "Sepal Length", ylab = "Sepal Width")
# 6. Gráficos avanzados con ggplot2
library(ggplot2)
# Gráfico de dispersión coloreado por especie
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Relación entre Sepal Length y Sepal Width por especie")
# Boxplot de la longitud del sépalo por especie
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
ggtitle("Distribución de Sepal Length por especie")
# 7. Correlación entre variables
cor(iris_numeric)
# 8. Modelos de regresión
modelo <- lm(Sepal.Length ~ Sepal.Width, data = iris)
summary(modelo)
# Agregar la recta de regresión al gráfico de dispersión
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
ggtitle("Regresión lineal entre Sepal Width y Sepal Length")
# 9. Análisis Clúster: Agrupamiento K-Means
set.seed(123)  # Para reproducibilidad
kmeans_result <- kmeans(iris_numeric, centers = 3)
# Añadir los clusters al dataset
iris$Cluster <- as.factor(kmeans_result$cluster)
# Visualizar clusters
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point() +
ggtitle("Agrupamiento K-Means en el dataset iris")
# 10. Gráficos interactivos con plotly
library(plotly)
# Convertir un gráfico de ggplot2 a interactivo
grafico_interactivo <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Gráfico interactivo con Plotly")
# Mostrar el gráfico interactivo
ggplotly(grafico_interactivo)
# 2. Imprimir en pantalla
print("¡Hola, mundo!")  # Muestra texto en la consola
# 3. Variables y tipos de datos
x <- 10         # Asignación de un número entero
pi_val <- 3.14  # Números decimales (doble precisión)
texto <- "R es genial"  # Cadenas de texto
logico <- TRUE   # Valores lógicos (TRUE o FALSE)
# Mostrar el valor de una variable
print(x)
print(texto)
# 4. Operaciones matemáticas básicas
a <- 5
b <- 2
suma <- a + b
resta <- a - b
multiplicacion <- a * b
division <- a / b
potencia <- a^b
raiz_cuadrada <- sqrt(a)
# 4. Operaciones matemáticas básicas
a <- 7
suma <- a + b
resta <- a - b
multiplicacion <- a * b
division <- a / b
potencia <- a^b
raiz_cuadrada <- sqrt(a)
# 4. Operaciones matemáticas básicas
a <- 5
suma <- a + b
resta <- a - b
multiplicacion <- a * b
division <- a / b
potencia <- a^b
raiz_cuadrada <- sqrt(a)
# Mostrar resultados
print(suma)
print(raiz_cuadrada)
# 5. Vectores en R (listas de datos del mismo tipo)
numeros <- c(1, 2, 3, 4, 5)
print(numeros)
# Operaciones con vectores
numeros_dobles <- numeros * 2  # Multiplica cada elemento por 2
print(numeros_dobles)
# Seleccionar elementos de un vector
print(numeros[1])  # Primer elemento
print(numeros[2:4])  # Del segundo al cuarto
# 6. Factores (variables categóricas)
colores <- factor(c("rojo", "azul", "verde", "rojo", "azul"))
print(colores)
# 7. DataFrames (tablas de datos)
datos <- data.frame(
Nombre = c("Ana", "Carlos", "Beatriz"),
Edad = c(23, 35, 29),
Ciudad = c("Madrid", "Barcelona", "Sevilla")
)
View(datos)
print(datos)
# Acceder a una columna
datos$Edad
# Seleccionar una fila específica
datos[2, ]  # Segunda fila
# Seleccionar una celda específica
datos[2, "Ciudad"]
# 8. Condicionales y bucles
if (x > 5) {
print("x es mayor que 5")
} else {
print("x es menor o igual a 5")
}
# Bucle for
for (i in 1:5) {
print(paste("Iteración número", i))
}
# Bucle while
contador <- 1
while (contador <= 3) {
print(paste("Valor de contador:", contador))
contador <- contador + 1
}
# 9. Funciones en R
doble <- function(numero) {
return(numero * 2)
}
View(doble)
# Función con múltiples argumentos
suma_numeros <- function(a, b) {
return(a + b)
}
resultado <- doble(4)
print(resultado)
print(suma_numeros(10, 20))
print(suma_numeros(60, 20))
print(suma_numeros(10, 20))
# 10. Gráficos básicos con R
x <- c(1, 2, 3, 4, 5)
y <- c(2, 4, 6, 8, 10)
plot(x, y, type = "b", col = "blue", main = "Gráfico en R")
library(ggplot2)  # Cargar la librería
# Crear un gráfico con ggplot2
df <- data.frame(x = c(1, 2, 3, 4, 5), y = c(3, 5, 7, 9, 11))
ggplot(df, aes(x = x, y = y)) +
geom_point(color = "red") +
geom_line() +
ggtitle("Gráfico con ggplot2")
# Cargar el dataset
data(iris)
# Cargar el dataset
data(iris)
# Cargar el dataset
data(iris)
# Mostrar las primeras filas
head(iris)
# 2. Exploración básica del dataset
# Ver la estructura del dataset
str(iris)
# Resumen estadístico de las variables
summary(iris)
# Nombres de las columnas
colnames(iris)
# Dimensiones del dataset (filas y columnas)
dim(iris)
# 3. Análisis descriptivo
# Media, mediana y desviación estándar de una variable numérica
mean(iris$Sepal.Length)
median(iris$Sepal.Length)
sd(iris$Sepal.Length)
# Contar valores por categoría
table(iris$Species)
# 4. Filtrado de datos
# Seleccionar solo las filas donde la especie es "setosa"
setosa <- subset(iris, Species == "setosa")
head(setosa)
# Seleccionar solo columnas numéricas
iris_numeric <- iris[, 1:4]
head(iris_numeric)
# 5. Visualización de datos
# Histograma de la longitud del sépalo
hist(iris$Sepal.Length, main = "Histograma de Sepal Length", col = "blue", xlab = "Sepal Length")
# Diagrama de dispersión entre dos variables
plot(iris$Sepal.Length, iris$Sepal.Width, col = iris$Species,
main = "Relación entre Sepal Length y Sepal Width", xlab = "Sepal Length", ylab = "Sepal Width")
# 6. Gráficos avanzados con ggplot2
library(ggplot2)
# Gráfico de dispersión coloreado por especie
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Relación entre Sepal Length y Sepal Width por especie")
# Boxplot de la longitud del sépalo por especie
ggplot(iris, aes(x = Species, y = Sepal.Length, fill = Species)) +
geom_boxplot() +
ggtitle("Distribución de Sepal Length por especie")
# 7. Correlación entre variables
cor(iris_numeric)
# 8. Modelos de regresión
modelo <- lm(Sepal.Length ~ Sepal.Width, data = iris)
summary(modelo)
# Agregar la recta de regresión al gráfico de dispersión
ggplot(iris, aes(x = Sepal.Width, y = Sepal.Length)) +
geom_point() +
geom_smooth(method = "lm", col = "red") +
ggtitle("Regresión lineal entre Sepal Width y Sepal Length")
# 9. Análisis Clúster: Agrupamiento K-Means
set.seed(123)  # Para reproducibilidad
kmeans_result <- kmeans(iris_numeric, centers = 3)
# Añadir los clusters al dataset
iris$Cluster <- as.factor(kmeans_result$cluster)
# Visualizar clusters
ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Cluster)) +
geom_point() +
ggtitle("Agrupamiento K-Means en el dataset iris")
# 10. Gráficos interactivos con plotly
library(plotly)
# Convertir un gráfico de ggplot2 a interactivo
grafico_interactivo <- ggplot(iris, aes(x = Sepal.Length, y = Sepal.Width, color = Species)) +
geom_point() +
ggtitle("Gráfico interactivo con Plotly")
# Mostrar el gráfico interactivo
ggplotly(grafico_interactivo)
# Instalar y cargar los paquetes necesarios
if (!require("datasauRus")) install.packages("datasauRus")
library(datasauRus)
library(ggplot2)
library(dplyr)
library(gganimate)
library(gifski)
if (!require("gganimate")) install.packages("gganimate")
if (!require("gifski")) install.packages("gifski")
install.packages("gganimate")
library(datasauRus)
library(ggplot2)
library(dplyr)
# Mostrar el Cuarteto de Anscombe
# Cargar los datos
data("anscombe")
# Calcular estadísticas descriptivas para cada conjunto
# Función auxiliar para calcular estadísticas
calcular_estadisticas <- function(x, y) {
c(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
}
# Calcular estadísticas para cada conjunto
estadisticas <- data.frame(
conjunto1 = calcular_estadisticas(anscombe$x1, anscombe$y1),
conjunto2 = calcular_estadisticas(anscombe$x2, anscombe$y2),
conjunto3 = calcular_estadisticas(anscombe$x3, anscombe$y3),
conjunto4 = calcular_estadisticas(anscombe$x4, anscombe$y4)
)
print("Estadísticas del Cuarteto de Anscombe:")
print(estadisticas)
# Crear un gráfico mejorado del Cuarteto de Anscombe
anscombe_long <- data.frame(
x = c(anscombe$x1, anscombe$x2, anscombe$x3, anscombe$x4),
y = c(anscombe$y1, anscombe$y2, anscombe$y3, anscombe$y4),
conjunto = rep(1:4, each = 11)
)
p1 <- ggplot(anscombe_long, aes(x = x, y = y)) +
geom_point(color = "steelblue", size = 2) +
facet_wrap(~conjunto, ncol = 2) +
theme_minimal() +
labs(title = "El Cuarteto de Anscombe",
subtitle = "Cuatro conjuntos de datos con estadísticas similares pero visualmente diferentes") +
theme(plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray"))
# Guardar el gráfico
ggsave("anscombe_plot.png", p1, width = 10, height = 8)
# Ahora mostramos el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
# Ahora mostramos el Datasaurus
# Cargar los datos del Datasaurus
data("datasaurus_dozen")
# Calcular estadísticas para cada conjunto del Datasaurus
estadisticas_datasaurus <- datasaurus_dozen %>%
group_by(dataset) %>%
summarise(
media_x = mean(x),
media_y = mean(y),
sd_x = sd(x),
sd_y = sd(y),
correlacion = cor(x, y)
)
print("Estadísticas del Datasaurus:")
print(estadisticas_datasaurus)
# Crear un gráfico mejorado del Datasaurus
p2 <- ggplot(datasaurus_dozen, aes(x = x, y = y)) +
geom_point(color = "steelblue", alpha = 0.6, size = 0.8) +
facet_wrap(~dataset, ncol = 4) +
theme_minimal() +
labs(title = "El Datasaurus",
subtitle = "Conjuntos de datos con estadísticas similares pero patrones visuales únicos") +
theme(plot.title = element_text(size = 16, face = "bold"),
plot.subtitle = element_text(size = 12, color = "gray"),
strip.text = element_text(size = 8),
axis.text = element_text(size = 6))
# Guardar el gráfico
ggsave("datasaurus_plot.png", p2, width = 16, height = 12)
library(plotly)
# Gráfico interactivo del dinosaurio
dino_data <- subset(datasaurus_dozen, dataset == "dino")
plot_ly(dino_data, x = ~x, y = ~y, type = "scatter", mode = "markers") %>%
layout(title = "El Datasaurus",
xaxis = list(title = "X"),
yaxis = list(title = "Y"))
# Mensaje final
cat("\nEste ejemplo demuestra que:\n")
cat("1. Las estadísticas descriptivas por sí solas pueden ser engañosas\n")
cat("2. La visualización de datos es crucial para entender realmente los datos\n")
cat("3. No debemos confiar ciegamente en los números sin ver qué hay detrás\n")
cat("\nSe han generado los siguientes archivos:\n")
cat("- anscombe_plot.png: Visualización del Cuarteto de Anscombe\n")
cat("- datasaurus_plot.png: Visualización de todos los conjuntos del Datasaurus\n")
print(p1)
# Guardar el gráfico
ggsave("01 Introducción/anscombe_plot.png", p1, width = 10, height = 8)
# Guardar el gráfico
setwd(dirname(rstudioapi::getSourceEditorContext()$path))
ggsave("anscombe_plot.png", p1, width = 10, height = 8)
# Guardar el gráfico
ggsave("datasaurus_plot.png", p2, width = 16, height = 12)
